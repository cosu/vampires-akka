/*
 *
 *  * The MIT License (MIT)
 *  * Copyright © 2016 Cosmin Dumitru, http://cosu.ro <cosu@cosu.ro>
 *  *
 *  * Permission is hereby granted, free of charge, to any person obtaining a copy
 *  * of this software and associated documentation files (the “Software”), to deal
 *  * in the Software without restriction, including without limitation the rights
 *  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  * copies of the Software, and to permit persons to whom the Software is
 *  * furnished to do so, subject to the following conditions:
 *  *
 *  * The above copyright notice and this permission notice shall be included in
 *  * all copies or substantial portions of the Software.
 *  *
 *  * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  * THE SOFTWARE.
 *  *
 *
 */

apply plugin: 'base'
apply plugin: 'distribution'


wrapper {
    gradleVersion = '2.11'
}



allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

}



subprojects {
    apply plugin: 'java'
    apply plugin: 'application'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
//    apply plugin: 'findbugs'


    idea {
        module {
//            sourceDirs += file('generated')
            generatedSourceDirs += file('src/main/generated')
            downloadJavadoc = true
            downloadSources = true
        }
    }

    compileJava {
        targetCompatibility= 1.8
        sourceCompatibility= 1.8
        options.fork = true
        options.incremental = true
    }

    group 'ro.cosu.vampires'
    version '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    sourceSets {
        integrationTest {
            java.srcDir file('src/integrationTest/java')
            resources.srcDir file('src/integrationTest/resources')
        }
    }

    task integrationTest(type: Test) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
    }

    task installLocal(dependsOn:[distZip], type: Copy) {
        def zipFile = file("${buildDir}/distributions/${project.name}-${project.version}.zip")
        def outputDir = file(System.properties['user.home'] + "/vampires-akka-dist/")
        from zipTree(zipFile)
        into outputDir
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    check.dependsOn jacocoTestReport

    integrationTest.dependsOn installDist

    dependencies {
        def akkaVersion = "2.11:2.4.6"

        compile "com.typesafe.akka:akka-actor_${akkaVersion}"
        compile "com.typesafe.akka:akka-remote_${akkaVersion}"
        compile "com.typesafe.akka:akka-slf4j_${akkaVersion}"

        compile 'com.google.guava:guava:19.0'
        compile 'com.google.inject:guice:4.0'
        compile 'com.google.inject.extensions:guice-multibindings:4.0'
        compile 'com.google.auto.value:auto-value:1.2'
        compile 'com.google.code.gson:gson:2.6.2'
        compile 'com.google.code.findbugs:jsr305:3.0.1'

        compile 'ch.qos.logback:logback-classic:1.1.7'
        compile 'org.apache.commons:commons-exec:1.3'
        compile 'org.slf4j:jul-to-slf4j:1.7.21'
        compile 'io.dropwizard.metrics:metrics-core:3.1.2'


        testCompile 'junit:junit:4.12'
        testCompile "com.typesafe.akka:akka-testkit_${akkaVersion}"
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile "org.mockito:mockito-core:1.+"

        integrationTestCompile sourceSets.main.output
        integrationTestCompile sourceSets.test.output
        integrationTestCompile configurations.testCompile
        integrationTestRuntime configurations.testRuntime
    }

    applicationDistribution.from("scripts/") {
        into "scripts/"
        fileMode 0755
    }

}

project(':client') {
    mainClassName = "ro.cosu.vampires.client.Client"
    dependencies {
        compile project(':server')
        compile 'io.kamon:sigar-loader:1.6.6-rev002'
        compile 'com.github.docker-java:docker-java:3.0.0-RC4'
    }
}

project(':server'){
    mainClassName = "ro.cosu.vampires.server.Server"
    dependencies {
        compile 'org.mongodb.morphia:morphia:1.1.1'
        compile 'com.jcraft:jsch:0.1.53'
        compile 'org.mongodb.morphia:morphia-logging-slf4j:1.1.1'
        compile 'com.amazonaws:aws-java-sdk-ec2:1.11.+'
        compile 'com.sparkjava:spark-core:2.5'
        compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'

    }
}

